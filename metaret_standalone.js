{var need$,read;(function (global){need$ =need$Impl;var has={},inline_workspace={};var readNative=typeof read==='function';need$.read=readNative?read:xhrGetSync;{if (typeof lightparse==='undefined')(typeof need$ !=='undefined'?need$ :load)("lightparse.js");if (typeof lp2fmtree==='undefined')(typeof need$ !=='undefined'?need$ :load)("lp2fmtree.js");if (typeof metaparse==='undefined')(typeof need$ !=='undefined'?need$ :load)("metaret.js");(function (global){global.jsm2js=jsm2js;function jsm2js(jsm_code){var local_name2info={},arr=metaparse(jsm_code,local_name2info,{doNotCompile:true}),ret_js=jsm_code;replace_rec(arr);check_leftover(ret_js);return ret_js;function replace_rec(arr){for (var i=arr.length;i--;){var one=arr[i],fmtree=one.fmtree,info=one.info,begin=fmtree.begin,end=fmtree.end,lastname=info.lastname;begin.toPrecision.call.a;(end || null).toPrecision.call.a;if (fmtree.isMetafunction){ret_js=ret_js.substring(0,begin)+'\nfunction '+info.lastname+'('+info.paramArr.join(',')+')\n{\n'+(info.newBody || (info.solve(),info.newBody))+'\n}\n'+ret_js.substring(end);}else if (fmtree.isFunction){var children=fmtree.children;if (children)replace_rec(children.map(function (kid){return{fmtree:kid,info:local_name2info[kid.fullname]};} ) ); } } } } var CONST;function check_leftover(jscode){CONST || (CONST=metaparse.get_CONST());var lp=lightparse(jscode,CONST.LIGHTPARSE_OPT),fm=lp2fmtree(lp),rO=lp.reservedObj,mfunArr=(rO[CONST.METAFUN]|| []).map(enrich),mretArr=(rO[CONST.METARET]|| []).map(enrich);if (mfunArr.length || mretArr.length){throw new Error('jsm2js:check_leftover: found remaining `metafun` and/or `metaret` within function(s): '+((mfunArr.concat(mretArr).map(function (x){return x.containing_function.fullname;})).join(','))+' - Please check for basic errors. For example a `metaret` can only be used from within a `metafun`.'+' See also github issue #9: https://github.com/glathoud/js.metaret/issues/9');}function enrich(begin){var containing_function;for (var n=fm.length,i=0;i < n;i++){var one_fm=fm[i];if (one_fm.begin <=begin && begin < one_fm.end){containing_function=one_fm;break;}} return{begin:begin,containing_function:containing_function,containing_function_fullname:containing_function && containing_function.fullname,local_context:jscode.substring(Math.max(0,begin-50 ),begin+40 ) }; } } })(this);}{if (typeof lightparse==='undefined')(typeof need$ !=='undefined'?need$ :load)("lightparse.js");if (typeof lp2fmtree==='undefined')(typeof need$ !=='undefined'?need$ :load)("lp2fmtree.js");(function (global){var INLINE='inline',LIGHTPARSE_OPT={extraReservedArr:[INLINE]},VARASSIGN='varassign',ASSIGN='assign',CALL='call',BRACKET='bracket',ROUND='round',IDENTIFIER='identifier',RESERVED='reserved',RETURN='return',VAR='var',VARDECL='vardecl';global.inline=inline;function inline(code,workspace,opt_code_info,error_inline_stack){workspace || (workspace={});error_inline_stack || (error_inline_stack=[]);var lp=lightparse(code,LIGHTPARSE_OPT),fm=lp2fmtree(lp),all=lp.all,inlineArr=all .map(function (o,ind){var ret=getInlineInfo(o,ind,all,code);if (ret){ret.begin=ret.o.begin;ret.end=ret.args.end;ret.str=code.substring(ret.begin,ret.end);}return ret;}).filter(function (info){return info;}) ;var lastname2fmarr=fm.lastname2fmarr;var key=opt_code_info?JSON.stringify(opt_code_info):code;error_inline_stack.push({key:key,code:code,workspace:workspace,opt_code_info:opt_code_info});if(key in workspace){var newcode=workspace[key].newcode;if ('string' !==typeof newcode){if ('undefined' !==typeof console && console && console.error){console.error('error_inline_stack (summary):\n '+error_inline_stack.map(function (x){return '\n'+x.key.substring(0,96)+(x.key.length < 96 ?'':'...');}).join('\n\n###\n'));console.error('error_inline_stack (full):');console.error(error_inline_stack);}throw new Error('inline error: Most likely you have an infinite `inline` recursion. Consider using `metafun` and `metaret` instead.');}return newcode;}workspace[key]={code_info:opt_code_info,inlineArr:inlineArr,lastname2fmarr:lastname2fmarr,lp:lp,fm:fm};if (!inlineArr.length)return workspace[key].newcode=code;for (var i=inlineArr.length;i--;){var one=inlineArr[i];one.fmScopePath=getFmScopePath(fm,one);var local_fmCallMatch=getFmCallMatch(fm,one,one.fmScopePath);if (local_fmCallMatch){one.hasLocalMatch=true;one.fmCallMatch=local_fmCallMatch;one.matchKey=key;}else{var matches=[],callname=one.call.name;(callname || 0).substring.call.a;for (var other_key in workspace){if (workspace.hasOwnProperty(key)){if (key===other_key)continue;var other_stuff=workspace[other_key],other_lastname2fmarr=other_stuff.lastname2fmarr,other_fmarr=other_lastname2fmarr[callname],other_n=other_fmarr && other_fmarr.length;if (other_n===1) {if (one.fmCallMatch){throw new Error('Ambiguous match for inline call "'+callname+'" found between the 2 pieces: '+one.matchKey+'\n --- and --- \n'+other_key);}one.hasLocalMatch=false;one.fmCallMatch=other_fmarr[0 ];one.matchKey=other_key;check_no_local_closure(one.fmCallMatch);}else if (other_n===2) {throw new Error('Ambiguous match for inline call "'+callname+'" found within piece "'+other_key);}}} } if (!one.fmCallMatch)throw new Error('inline error: when inlining within a file, the source body must be visible to the target inline location. one.call.name: "'+one.call.name+'", opt_code_info: '+JSON.stringify(opt_code_info));var matchBegin=one.fmCallMatch.begin,matchEnd=one.fmCallMatch.end,argumentsArr=lp.identifierObj['arguments']|| [];if (argumentsArr.some(function (x){return matchBegin <=x && x < matchEnd;})) throw new Error('inline error: it is forbidden to use `arguments` in the body of the function to be inlined.');}var newcode=code;for (var i=inlineArr.length;i--;){var one=inlineArr[i],begin=one.begin,end=one.end;newcode=newcode.substring(0,begin)+inline(getInlineCodeHygienic(lp.identifierObj,fm,one),workspace,null,error_inline_stack)+newcode.substring(end);} return workspace[key].newcode=newcode;}function getInlineInfo(o,ind,all,code){if (o.name !==INLINE)return;var v,identifier,call,args;if((call=all[ind+1 ]).type===CALL && (args=all[ind+2 ]).type===BRACKET && args.typebracket===ROUND){return{o:o,ind:ind,inlinetype:CALL,call:call,args:args};}if ((identifier=all[ind+1 ]).type===IDENTIFIER && (call=all[ind+2 ]).type===CALL && (args=all[ind+3 ]).type===BRACKET && args.typebracket===ROUND && /=/.test(code.substring(identifier.end,call.begin))){return{o:o,ind:ind,inlinetype:ASSIGN,identifier:identifier,call:call,args:args};}var vc;if((v=all[ind+1 ]).type===BRACKET && v.typebracket===VAR && (vc=v.children).length===4 && (identifier=vc[1 ]).type===VARDECL && (call=vc[2 ]).type===CALL && (args=vc[3 ]).type===BRACKET && args.typebracket===ROUND && /=/.test(code.substring(identifier.end,call.begin))){return{o:o,ind:ind,inlinetype:VARASSIGN,identifier:identifier,call:call,args:args};}throw new Error('Unrecognized inline syntax.');}function getInlineCodeHygienic(identifierObj,fm,one){var error;var fmScopePath=one.fmScopePath,fmCallMatch=one.fmCallMatch;if (-1 < fmScopePath.indexOf(fmCallMatch)){if ('undefined' !==typeof console)console.error('Could not inline: self-recursion found for "'+fmCallMatch.fullname+'".');else if ('undefined' !==typeof print)print('[ERROR] Could not inline: self-recursion found for "'+fmCallMatch.fullname+'".');return one.str.substring(INLINE.length);}var io=Object.create(identifierObj);var undefN=getNewName('undef',io),retN=getNewName('ret',io),param_arr=fmCallMatch.param_arr,paramN_arr=param_arr.map(function (name){return getNewName(name,io);}) ,paramN_map=getMapping(param_arr,paramN_arr),vardeclArr=fmCallMatch.vardeclArr,varnameArr=vardeclArr.map(function (x){return x.name;}) ,vardeclN_arr=varnameArr.map(function (name){return getNewName(name,io);}) ,vardeclN_map=getMapping(varnameArr,vardeclN_arr),body=fmCallMatch.body,body_begin=fmCallMatch.body_node.begin,body_end=fmCallMatch.body_node.end,body_length=body_end-body_begin,toReplace=[],body_lp=lightparse(body,LIGHTPARSE_OPT);for (var i=body_lp.identifierArr.length;i--;){var ident=body_lp.identifierArr[i],newstr=paramN_map[ident.name]|| vardeclN_map[ident.name];if (newstr)toReplace.push({o:ident,newstr:newstr});} for (var i=body_lp.bracketextraArr.length;i--;){var brack=body_lp.bracketextraArr[i];if (brack.typebracket !==RETURN)continue;toReplace.push({o:{begin:brack.begin,end:brack.begin+RETURN.length},newstr:retN+'='});toReplace.push({o:{begin:brack.end,end:brack.end},newstr:' break;'});} toReplace.sort(function (a,b){var error;return a.o.begin < b.o.begin?-1 :a.o.end > b.o.end?+1 :error.bug;});var newbody=body;for (var i=toReplace.length;i--;){var r=toReplace[i];newbody=newbody.substring(0,r.o.begin)+r.newstr+newbody.substring(r.o.end);} var oas=one.args.sepSplit,set_args_arr=paramN_arr.map(function (pN,i){return pN+'='+(i < oas.length?oas[i].str:undefN)+';';});var var_decl_undef_arr=[],var_decl_undef_set={};for (var n=body_lp.bracketextraArr.length,i=0;i < n;i++){var brack=body_lp.bracketextraArr[i];if (brack.typebracket !==VAR)continue;var vdArr=brack.vdArr;for (var nj=vdArr.length,j=0;j < nj;j++){var vd=vdArr[j];if (!vd.rightstr && !(vd.leftstr in var_decl_undef_set)){var_decl_undef_arr.push(vardeclN_map[vd.leftstr]+' ='+undefN);var_decl_undef_set[vd.leftstr]=1; } } } var bodyAlreadyCurly=/^\s*\{[\s\S]*?\}\s*$/.test(newbody);var newcode=['{','//#INLINE_BEGIN: '+one.str.replace(/\r\n/g,' ')].concat(['var '+undefN+','+retN+';']).concat(['//#INLINE_SET_INPUT_ARGS:']).concat(set_args_arr).concat(var_decl_undef_arr.length?['var '+var_decl_undef_arr.join(', ')+';']:[]).concat(['//#INLINE_IMPLEMENT:']).concat(['do {']).concat(newbody).concat(['} while (false);']).concat(one.inlinetype===CALL?[]:one.inlinetype===ASSIGN?[one.identifier.name+'='+retN+';']:one.inlinetype===VARASSIGN?['var '+one.identifier.name+'='+retN+';']:error.bug).concat(['//#INLINE_END: '+one.str.replace(/\r\n/g,' ')]) .concat(['}']).join('\n');return newcode;}function getMapping(arr_in,arr_out){var ret={};for (var i=arr_in.length;i--;)ret[arr_in[i]]=arr_out[i];return ret;}function getNewName(name,io){var base='_'+name+'_',i='',newname;while ((newname=base+i)in io)i=+i+1;io[newname]=1;return newname;}function getFmScopePath(fmtree,one,sofar){sofar || (sofar=[]);for (var n=fmtree.length,i=0;i < n;i++){var fm=fmtree[i];if (fm.begin <=one.begin && one.end <=fm.end){sofar.push(fm);getFmScopePath(fm.children || [],one,sofar);break;}} return sofar;}function getFmCallMatch(fmtree,one,fmScopePath){var callname=one.call.name,all=fmtree.concat(fmScopePath),match;top_loop:for (var i=all.length;i--;){var fm=all[i];var fmc=fm.children || [];for (var j=fmc.length;j--;){var c=fmc[j];if (c.lastname===callname){match=c;break top_loop;}} if (fm.lastname===callname){match=fm;break top_loop;}}if (match)check_bound_variables_all_shared(match,fmScopePath.slice(-1 )[0 ]);return match;}function check_no_local_closure(fm){var vuo=fm.varuseObj,vdo=fm.vardeclObj;for (var name in vuo){if (!(name in vdo)){var pFm=fm;while (pFm=pFm.parent){if (name in pFm.vardeclObj){throw new Error('inline error: when inlining across files, the body to inline MUST NOT use locally bound variables (closures). (It may use globals, though.)');}} }} } function check_bound_variables_all_shared(match,target_inline_fm){var bound=[],m_vuo=match.varuseObj,m_vdo=match.vardeclObj,m_pset=match.param_set;for (var name in m_vuo){if (!(name in m_vdo)&& !(name in m_pset)){bound.push(name);}} bound.forEach(check_declared_in_same_scope);function check_declared_in_same_scope(name){var m_decl_scope=decl_scope(name,match),t_decl_scope=decl_scope(name,target_inline_fm);if (m_decl_scope !==t_decl_scope)throw new Error('inline error: when inlining within a file, the source body and the target inline location must share their bound variables (if the source body has any).');}function decl_scope(name,fm){return fm?(fm.vardeclObj[name]?fm:decl_scope(name,fm.parent)):null;}}})(this);}var canInline=true;function need$Impl(path){if (has[path])return;has[path]=1;var isJsm;if(/\.js$/.test(path))isJsm=false;else if (/\.jsm$/.test(path))isJsm=true;else throw new Error("need$: unknown type, only .js and .jsm are supported. Path: '"+path+"'");var code=need$.read(path);var rx_str="/need\\$\\s*\\(\\s*([\"\\'])([^\"\\']+)\\1/",rx_all=new RegExp(rx_str,"g"),rx_one=new RegExp(rx_str),need_all=code.match(/need\$\s*\(\s*(["\'])([^"\']+)\1/g);while (need_all && need_all.length)need$Impl(need_all.shift().match(/need\$\s*\(\s*(["\'])([^"\']+)\1/)[2]);if (isJsm){code=jsm2js(code);if (canInline)code=inline(code,inline_workspace,{path:path});}eval.call(global,code);}function xhrGetSync(path){var xhr=new XMLHttpRequest();xhr.open("GET",path,false);xhr.send();if (xhr.status !== 0 && xhr.status !== 200) throw new Error("need$:xhrGetSync: Could not load path '"+path+"'");return xhr.responseText+"\r\n//@ sourceURL="+path;}})(this);}
